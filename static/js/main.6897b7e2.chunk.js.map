{"version":3,"sources":["components/Background/Background.module.css","components/Day/Day.module.css","components/Week/Card/Card.module.css","img/bg.jpg","img/sunny.png","img/rain.png","img/cloudy.png","components/Week/Week.module.css","components/Background/Background.js","utils/utils.js","components/Day/Day.js","components/Week/Card/Card.js","components/Week/Week.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Background","props","className","styles","container","filter","img","src","bg","alt","content","children","chooseIcon","icon_id","sunny","cloudy","rain","kelvinToCelcius","kelvin","toFixed","Day","temp","desc","icon","imgsrc","celcius","day","moment","require","Card","date","weather","format","card","title","Week","list","week","map","item","id","dt_txt","description","main","key","App","fivedays","Heidelberg","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,UAAY,8BAA8B,OAAS,2BAA2B,IAAM,wBAAwB,QAAU,8B,gBCAxID,EAAOC,QAAU,CAAC,IAAM,iBAAiB,IAAM,iBAAiB,KAAO,kBAAkB,KAAO,oB,gBCAhGD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,KAAO,mBAAmB,IAAM,oB,6ybCDtGD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCC3CD,EAAOC,QAAU,CAAC,KAAO,qB,gLCGV,SAASC,EAAWC,GAC/B,OACI,yBAAKC,UAAWC,IAAOC,WACnB,yBAAKF,UAAWC,IAAOE,QACnB,yBAAKH,UAAWC,IAAOG,IAAKC,IAAKC,IAAIC,IAAI,mBAE7C,yBAAKP,UAAWC,IAAOO,SAClBT,EAAMU,W,qECPVC,EAAa,SAAAC,GACtB,OAAQA,GACJ,KAAK,IACD,OAAOC,IACX,KAAM,IACF,OAAOC,IACX,QACI,OAAOC,MAINC,EAAkB,SAACC,GAC5B,OAAQA,EAAS,QAAQC,WCZd,SAASC,EAAT,GAAkC,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,KAC/BC,EAASZ,EAAWW,GACpBE,EAAUR,EAAgBI,GAChC,OACI,yBAAKnB,UAAWC,IAAOuB,KACnB,yBAAKxB,UAAWC,IAAOG,IAAKC,IAAKiB,EAAQf,IAAKa,IAC9C,yBAAKpB,UAAWC,IAAOkB,MAAOI,EAA9B,QACA,yBAAKvB,UAAWC,IAAOmB,MAAOA,I,qCCRpCK,EAASC,EAAQ,IAER,SAASC,EAAT,GAA4C,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,QAASV,EAAa,EAAbA,KAAMC,EAAO,EAAPA,KACzCI,EAAMC,EAAOG,GAAME,OAAO,OAC1B1B,EAAMM,EAAWmB,GACjBN,EAAUR,EAAgBI,GAChC,OACI,yBAAKnB,UAAWC,IAAO8B,MACnB,yBAAK/B,UAAWC,IAAO2B,MAAOJ,GAC9B,yBAAKnB,IAAKD,EAAKJ,UAAWC,IAAOG,IAAKG,IAAKa,EAAMY,MAAOZ,IACxD,6BAAMG,EAAN,SCTG,SAASU,EAAT,GAAuB,IAARC,EAAO,EAAPA,KAC1B,OACI,yBAAKlC,UAAWC,IAAOkC,MAClBD,EAAKE,IAAI,SAACC,EAAMC,GACb,OACI,kBAACX,EAAD,CAAMC,KAAMS,EAAKE,OAAQV,QAASQ,EAAKR,QAAQ,GAAGS,GAAIlB,KAAMiB,EAAKR,QAAQ,GAAGW,YAAarB,KAAMkB,EAAKI,KAAKtB,KAAMuB,IAAKJ,OCiBzHK,MAnBf,WACE,IAAMC,EAAWC,EAAWX,KAAK/B,OAAO,SAAAkC,GACtC,OAAOA,EAAKE,OAAOO,SAAS,cAE9B,OACE,yBAAK9C,UAAU,OACb,kBAACF,EAAD,KACE,yBAAKE,UAAU,aACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,UAAd,cACA,kBAACkB,EAAD,CAAKC,KAAM0B,EAAWX,KAAK,GAAGO,KAAKtB,KAAMC,KAAK,YAAYC,KAAM,MAChE,kBAACY,EAAD,CAAMC,KAAMU,SCNJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6897b7e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Background_container__2nWxJ\",\"filter\":\"Background_filter__7ULgy\",\"img\":\"Background_img__1qhiD\",\"content\":\"Background_content__1y-kE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"day\":\"Day_day__2nBs0\",\"img\":\"Day_img__2b0aK\",\"temp\":\"Day_temp__19E4y\",\"desc\":\"Day_desc__36ftn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3ZXyd\",\"date\":\"Card_date__35uZX\",\"temp\":\"Card_temp__1ettL\",\"img\":\"Card_img__3JKWi\"};","module.exports = __webpack_public_path__ + \"static/media/bg.e323ecf6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunny.bcb3306a.png\";","module.exports = __webpack_public_path__ + \"static/media/rain.afed3627.png\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.4dc8014e.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"week\":\"Week_week__REUXY\"};","import React from 'react'\r\nimport bg from '../../img/bg.jpg'\r\nimport styles from './Background.module.css'\r\n\r\nexport default function Background(props) {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.filter}>\r\n                <img className={styles.img} src={bg} alt=\"backgroundimg\"/>\r\n            </div>\r\n            <div className={styles.content}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import sunny from '../img/sunny.png'\r\nimport rain from '../img/rain.png'\r\nimport cloudy from '../img/cloudy.png'\r\n\r\nexport const chooseIcon = icon_id => {\r\n    switch (icon_id) {\r\n        case 800:\r\n            return sunny\r\n        case  802:\r\n            return cloudy    \r\n        default:\r\n            return rain\r\n    }\r\n}\r\n\r\nexport const kelvinToCelcius = (kelvin) => {\r\n    return (kelvin - 273.15).toFixed()\r\n}","import React from 'react'\r\nimport styles from './Day.module.css'\r\nimport {chooseIcon, kelvinToCelcius} from '../../utils/utils'\r\n\r\nexport default function Day({temp, desc, icon}) {\r\n    const imgsrc = chooseIcon(icon)\r\n    const celcius = kelvinToCelcius(temp)\r\n    return (\r\n        <div className={styles.day}>\r\n            <img className={styles.img} src={imgsrc} alt={desc}></img>\r\n            <div className={styles.temp}>{celcius}°</div>\r\n            <div className={styles.desc}>{desc}</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {chooseIcon, kelvinToCelcius} from '../../../utils/utils'\r\nimport styles from './Card.module.css'\r\nconst moment = require('moment');\r\n\r\nexport default function Card({date, weather, temp, desc}) {\r\n    const day = moment(date).format('D/M')\r\n    const img = chooseIcon(weather)\r\n    const celcius = kelvinToCelcius(temp)\r\n    return (\r\n        <div className={styles.card}>\r\n            <div className={styles.date}>{day}</div>\r\n            <img src={img} className={styles.img} alt={desc} title={desc} />\r\n            <div>{celcius}°</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport styles from './Week.module.css'\r\nimport Card from './Card/Card';\r\n\r\nexport default function Week({list}) {\r\n    return (\r\n        <div className={styles.week}>\r\n            {list.map((item, id) => {\r\n                return (\r\n                    <Card date={item.dt_txt} weather={item.weather[0].id} desc={item.weather[0].description} temp={item.main.temp} key={id}></Card>\r\n                )}\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Heidelberg from './data/example.json'\nimport Background from './components/Background/Background';\nimport Day from './components/Day/Day';\nimport Week from './components/Week/Week';\n\nfunction App() {\n  const fivedays = Heidelberg.list.filter(item => {\n    return item.dt_txt.includes('12:00:00')\n  })\n  return (\n    <div className=\"App\">\n      <Background>\n        <div className=\"container\">\n          <div className='box'>\n            <h1 className='center'>Heidelberg</h1>\n            <Day temp={Heidelberg.list[0].main.temp} desc='clear sky' icon={800}></Day>\n            <Week list={fivedays}></Week>\n          </div>\n        </div>\n      </Background>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}